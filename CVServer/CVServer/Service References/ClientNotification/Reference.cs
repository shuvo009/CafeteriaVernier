//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Procesta.CvServer.ClientNotification {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommandData", Namespace="http://schemas.datacontract.org/2004/07/ClientNotification")]
    [System.SerializableAttribute()]
    public partial class CommandData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Procesta.CvServer.ClientNotification.Commands CommandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CounterNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Procesta.CvServer.ClientNotification.Commands Command {
            get {
                return this.CommandField;
            }
            set {
                if ((this.CommandField.Equals(value) != true)) {
                    this.CommandField = value;
                    this.RaisePropertyChanged("Command");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterNumber {
            get {
                return this.CounterNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterNumberField, value) != true)) {
                    this.CounterNumberField = value;
                    this.RaisePropertyChanged("CounterNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Commands", Namespace="http://schemas.datacontract.org/2004/07/ClientNotification")]
    public enum Commands : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Shutdown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Restart = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountLogout = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientNotification.IClientNotification")]
    public interface IClientNotification {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IClientNotification/setCommand")]
        void setCommand(Procesta.CvServer.ClientNotification.CommandData command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientNotification/GetCommands", ReplyAction="http://tempuri.org/IClientNotification/GetCommandsResponse")]
        Procesta.CvServer.ClientNotification.CommandData[] GetCommands(string counterNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientNotification/RemoveCommand", ReplyAction="http://tempuri.org/IClientNotification/RemoveCommandResponse")]
        void RemoveCommand(string counterNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientNotificationChannel : Procesta.CvServer.ClientNotification.IClientNotification, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientNotificationClient : System.ServiceModel.ClientBase<Procesta.CvServer.ClientNotification.IClientNotification>, Procesta.CvServer.ClientNotification.IClientNotification {
        
        public ClientNotificationClient() {
        }
        
        public ClientNotificationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientNotificationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientNotificationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientNotificationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void setCommand(Procesta.CvServer.ClientNotification.CommandData command) {
            base.Channel.setCommand(command);
        }
        
        public Procesta.CvServer.ClientNotification.CommandData[] GetCommands(string counterNumber) {
            return base.Channel.GetCommands(counterNumber);
        }
        
        public void RemoveCommand(string counterNumber) {
            base.Channel.RemoveCommand(counterNumber);
        }
    }
}
